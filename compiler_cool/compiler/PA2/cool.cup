/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */


nonterminal Program program;
nonterminal Classes class_list;
nonterminal Class_ class;
nonterminal Formal formal;
nonterminal Features dummy_feature_list;
nonterminal Feature feature;
nonterminal Features feature_list;
nonterminal Formals formal_list;
nonterminal Formals dummy_formal_list;
nonterminal Cases branches;
nonterminal Case branch;
nonterminal Expressions expr_list;
nonterminal Expressions expr_semi;
nonterminal Expression expr;
nonterminal Expression let_stmt;
nonterminal no_expr S;

/* Precedence declarations go here. */
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

//cup will start with "nonterminal program";


program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= S:s CLASS TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(s.getLineNumber(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| S:s CLASS TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(s.getLineNumber(), n, p, f, curr_filename()); :}
	    |	S:s CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(s.getLineNumber(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	|	S:s CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(s.getLineNumber(), n, p, f, curr_filename()); :}
	;

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	;


feature_list /*una lista de features*/
	::= feature:f SEMI	
	{: RESULT = (new Features(curr_lineno())).appendElement(f); :}
	|	feature_list:flist feature:f SEMI	
	{: RESULT = flist.appendElement(f); :}
	;
feature
	::=
		S:s OBJECTID:o LPAREN formal_list:flist RPAREN COLON TYPEID:t LBRACE expr:e RBRACE	
		{: RESULT = new method(s.getLineNumber(), o, flist, t, e); :}
	| 	S:s OBJECTID:o LPAREN dummy_formal_list:dflist RPAREN COLON TYPEID:t LBRACE expr:e RBRACE
	 {: RESULT = new method(s.getLineNumber(), o, dflist, t, e); :}
	| 	S:s OBJECTID:o COLON TYPEID:t ASSIGN expr:e 
	{: RESULT = new attr(s.getLineNumber(), o, t, e); :}
	| 	S:s OBJECTID:o COLON TYPEID:t	
	{: RESULT = new attr(s.getLineNumber(), o, t, new no_expr(0)); :} /*caso especial donde no hay expresion, puntp critico*/
	;
formal_list//formals
	::=	formal:f	
	{: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
	|	formal_list:flist COMMA formal:f	
	{: RESULT = flist.appendElement(f); :}
	;
dummy_formal_list //dummy de formal
	::= /* empty */
	    {: RESULT = new Formals(curr_lineno()); :}
	;
	
formal
	::=	S:s OBJECTID:o COLON TYPEID:t
		{: RESULT = new formalc(s.getLineNumber(), o, t); :} // number, object, type
	;
//expr
expr_list //get a list of expr
	::=	expr:e	
	{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :} //numero.append(e)
	|	expr_list:el COMMA expr:e	{: RESULT = el.appendElement(e); :}
	;

expr_semi //expr, ID( [ expr [[, expr]]∗] ) 
	::=	expr:e SEMI	
	{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	|	expr_semi:es expr:e SEMI	
	{: RESULT = es.appendElement(e); :}
	;
//BLOCKS?????

/*expr ::= ID <- expr
| expr[@TYPE].ID( [ expr [[, expr]]∗
] )
| ID( [ expr [[, expr]]∗
] )
| if expr then expr else expr fi
| while expr loop expr pool
| { [[expr; ]]+}
| let ID : TYPE [ <- expr ] [[,ID : TYPE [ <- expr ]]]∗
in expr
| case expr of [[ID : TYPE => expr; ]]+esac
| new TYPE
| isvoid expr
| expr + expr
| expr − expr
| expr ∗ expr
| expr / expr
| ∼expr
| expr < expr
| expr <= expr
| expr = expr
| not expr
| (expr)
| ID
| integer
| string
| true
| false*/
expr
	::= S:s OBJECTID:o ASSIGN expr:e  //no expr, [objectid, -> expr] no expr
		{: RESULT = new assign(s.getLineNumber(), o, e); :}
	|	expr:e AT TYPEID:t S:s DOT OBJECTID:o LPAREN expr_list:el RPAREN //expr[@TYPE].ID( [ expr [[, expr]]∗] )
		{: RESULT = new static_dispatch(s.getLineNumber(), e, t, o, el); :}
	|	expr:e AT TYPEID:t S:s DOT OBJECTID:o LPAREN RPAREN //solo con una
		{: RESULT = new static_dispatch(s.getLineNumber(), e, t, o, new Expressions(s.getLineNumber())); :}
	|	expr:e S:s DOT OBJECTID:o LPAREN expr_list:el RPAREN
		{: RESULT = new dispatch(s.getLineNumber(), e, o, el); :}
	|	expr:e S:s DOT OBJECTID:o LPAREN RPAREN //expr.object()
		{: RESULT = new dispatch(s.getLineNumber(), e, o, new Expressions(s.getLineNumber())); :}
	|	S:s OBJECTID:o LPAREN expr_list:el RPAREN //<id>(<expr>,...,)
		{: RESULT = new dispatch(s.getLineNumber(), new object(s.getLineNumber(), AbstractTable.idtable.addString("self")), o, el); :}
	|	S:s OBJECTID:o LPAREN RPAREN
		{: RESULT = new dispatch(s.getLineNumber(), new object(s.getLineNumber(), AbstractTable.idtable.addString("self")), o, new Expressions(s.getLineNumber())); :}
	|	S:s IF expr:e1 THEN expr:e2 ELSE expr:e3 FI // se manda s.no(), if,then,else
		{: RESULT = new cond(s.getLineNumber(), e1, e2, e3); :}
	|	S:s WHILE expr:e1 LOOP expr:e2 POOL //e1, loop, e2 pool. 
		{: RESULT = new loop(s.getLineNumber(), e1, e2); :}
	|	S:s LBRACE expr_semi:es RBRACE //(expre;...;expre;)
		{: RESULT = new block(s.getLineNumber(), es); :}
	|	LET let_stmt:ls
		{: RESULT = ls; :}
	|	S:s CASE expr:e OF branches:br ESAC S:s1 //branches <id1> : <type1> => <expr1>;
		{: RESULT = new typcase(s.getLineNumber(), e, br); :}
	|	S:s NEW TYPEID:t S:s2 //nada new type nada. 7.10
		{: RESULT = new new_(s.getLineNumber(), t); :}
	|	S:s ISVOID expr:e S:s2 //7.11
		{: RESULT = new isvoid(s.getLineNumber(), e); :}
	|	expr:e1 S:s PLUS expr:e2 S:s2 //7.12
		{: RESULT = new plus(s.getLineNumber(), e1, e2); :}
	|	expr:e1 S:s MINUS expr:e2 S:s2//7.12
		{: RESULT = new sub(s.getLineNumber(), e1, e2); :}
	|	expr:e1 S:s MULT expr:e2 S:s2//7.12
		{: RESULT = new mul(s.getLineNumber(), e1, e2); :}
	|	expr:e1 S:s DIV expr:e2 S:s2//7.12
		{: RESULT = new divide(s.getLineNumber(), e1, e2); :}
	|	S:s NEG expr:e S:s1 //-expresion
		{: RESULT = new neg(s.getLineNumber(), e); :}
	|	expr:e1 S:s LT expr:e2 S:s2
		{: RESULT = new lt(s.getLineNumber(), e1, e2); :}
	|	expr:e1 S:s LE expr:e2 S:s2
		{: RESULT = new leq(s.getLineNumber(), e1, e2); :}
	|	expr:e1 S:s EQ expr:e2 S:s2
		{: RESULT = new eq(s.getLineNumber(), e1, e2); :}
	|	S:s NOT expr:e S:s1 //NOT expr
		{: RESULT = new comp(s.getLineNumber(), e); :}
	|	LPAREN expr:e RPAREN//(E) = e
		{: RESULT = e; :}
	|	S:s OBJECTID:o S:s1
		{: RESULT = new object(s.getLineNumber(), o); :}
	|	S:s INT_CONST:i S:s1
		{: RESULT = new int_const(s.getLineNumber(), i); :}
	|	S:x STR_CONST:s S:x1
		{: RESULT = new string_const(x.getLineNumber(), s); :}
	|	S:s BOOL_CONST:b S:s1
		{: RESULT = new bool_const(s.getLineNumber(), b); :}
	;
	let_stmt //7.8? es parte del let...(no es parte de un let o si?)... let (let_stmt) y entra aqui
	::=	S:s OBJECTID:o COLON TYPEID:t ASSIGN expr:e1 IN expr:e2 S:s2 //obj : type <- exp1 IN exp2
		{: RESULT =  new let(s.getLineNumber(), o, t, e1, e2); :}
	|	S:s OBJECTID:o COLON TYPEID:t IN expr:e S:s2  //o : t in e
		{: RESULT =  new let(s.getLineNumber(), o, t, new no_expr(0), e); :}
	|	S:s OBJECTID:o COLON TYPEID:t ASSIGN expr:e COMMA let_stmt:ls S:s2 // o:t<-e,lst (lets encadenado)
		{: RESULT =  new let(s.getLineNumber(), o, t, e, ls); :}
	|	S:s OBJECTID:o COLON TYPEID:t COMMA let_stmt:ls S:s2 //o:t,ls
		{: RESULT =  new let(s.getLineNumber(), o, t, new no_expr(0), ls); :}
	;
	
branches
	::=	branch:b
		{: RESULT = (new Cases(curr_lineno())).appendElement(b); :}
	|	branches:br branch:b
		{: RESULT = br.appendElement(b); :}
	;

branch
	::= S:s OBJECTID:o COLON TYPEID:t DARROW expr:e SEMI  S:s1 //o:t=>e;
		{: RESULT = new branch(s.getLineNumber(), o, t, e); :}
	;
	
S
	::=
	{: RESULT = new no_expr(curr_lineno()); :}
	;